version: "3"

services:
  web:
   image: cchencool/tutorial:part2
   deploy:
     replicas: 5
     resources:
       limits:
         cpus: "0.1" # each instance at most 10% of cpu
         memory: 50M
     restart_policy:
       condition: on-failure # immediately restart container if one fails;
   ports:
     - "80:80" # map port 4000 on the host to service-web's port 80
   networks:
     - webnet # instruct the containers of this service to share port 80 via a load-balanced network called webnet.

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes: #  giving the visualizer access to the host’s socket file for Docker
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement: # ensuring the service only ever run on a swarm manager -- never a worker.
        constraints: [node.role == manager]
    networks:
      - webnet
  
  redis:
    image: redis # Redis has an official image in the Docker library and has been granted the short image name of just redis, so no username/repo notation here
    ports:
      - "6379:6379"
    volumes:
      - "/home/docker/data:/data" # accesses an arbitrary directory in the host’s file system as /data inside the container, which is where Redis stores data.
    deploy:
      placement:
        constraints: [node.role == manager] # always runs on the manager, so it’s always using the same filesystem.
    command: redis-server --appendonly yes
    networks:
      - webnet

networks:
  webnet: # define webnet network with the default settings (a load-balanced overlay network)

